1. Identify the strong 'symbols' in the following two C modules
a) file1

#include <stdio.h>
#include <stdlib.h>

int buf[2] = {1,2};
extern int y;

void printStuff();

int main() {
    double x = 3.14;
    printStuff();
    x += 5.1;
    return 0;
}

b) file2

#include <stdio.h>

int foo() {
    printf("Hello\n");
}

extern int x;
int y;
int z = 1;

int main() {
    foo();
    int a = 10;
    a += 20;
}
----Answers to #1----
(Strong symbols are all procedures and initialized global variables)
> Strong symbols in (a): buf, main
> Strong symbols in (b): foo, z, main


2. Identify the weak 'symbols' in the same modules (1a and 1b)

----Answers to #2----
(Weak symbols are all uninitialized global variables)
> Weak symbols in (a): y
> Weak symbols in (b): x, y


3. An executable prog1 is created (using gcc) by static linking of an archive file libstatic.a (in addition to other dependencies like C files).
   Another executable prog2 is created by dynamic linking of a shared library libdynamic.so file (in addition to other dependencies).

   After their creation, if we delete 'libstatic.a' file, the prog1 executable still works fine.
   But if we delete 'libdynamic.so' file, the prog2 crashes immediately. Why is it so?

----Answers to #3----
> If the file ends in the .so file extension, then these are considered dynamically linked libraries (also called shared libraries). Unlike static linking, as is the case with archive files (.a file extension), the library file is required to be present just before the executable is run. Therefore, while the deletion of libstatic.a will result in execution of prog1, the deletion of libdynamic.so will crash prog2 (libdynamic.so is not statically linked, the executable does not actually contain the full code of libdynamic.so).
