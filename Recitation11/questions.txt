1. The function yoo() is calling a function who() in a C program. It was compiled using a non-traditional compiler and it's possible 
   that the procedure calling conventions were not obeyed with respect to register saving. Point out where are they not being obeyed. 
   
   The assembly code is as follows 

who:
	movq	%rdi, %rax
	subq	%rsi, %rax
	ret
yoo:
	pushq	%rbp
	pushq	%rbx
	movq	%rdi, %rbp
	movq	%rsi, %rbx
	leaq	5(,%rsi,8), %rsi
	leaq	5(%rdi), %rdi 
	call	who
	imulq	%rbp, %rax <--- NOT-OBEYED
	addq	%rbx, %rax
    popq    %rbp
    popq    %rbx
    ret

Calle can change the register values if the registers are in the stack frame, which they are not in this situation. (Specifically, %rax is altered).


2. The function yoo() is calling a function who() in a C program. It was compiled using a non-traditional compiler and it's possible 
   that the procedure calling conventions were not obeyed with respect to register saving. Point out where are they not being obeyed. 
   
   The assembly code is as follows 

who:
    subq    $123, %rdi
	movq	%rdi, %rax <--- HERE
	ret
yoo:
	pushq	%rbp
	movq	%rdi, %rbp
	leaq	5(%rdi), %rdi
	call	who
	imulq	%rbp, %rax <-- HERE
    ret

When the caller makes a procedure call, it is expected that the registers will hold the same value after the return of the callee (the value of %rax is not the same)



3. Show the memory layout and give the final size of these structs. You can use sizeof() function.
   In the memory layout, clearly show the memory addresses occupied by each data member, any holes within the struct or at the end.

a) struct comp {
      int a[3];
      char b[2];
      long c[2];
      double d;
      char e;
   };

Note: p indicates the first memory index
MEMORY LAYOUT: | a[0] (p+4)| a[1] (p+8)| a[2] (p+16)| b[0] (p+17)| b[1] (p+18)| c[0] (p+26)| c[1] (p+34)| d (p+42)| e (p+43)|


b) struct comp2 {
      char a;
      long b;
      char c[4];
      int d;
   };

Note: p indicates the first memory index
MEMORY LAYOUT: | a (p+4)| b (p+12)| c[0] (p+13)| c[1] (p+14)| c[2] (p+15)| c[3] (p+16)| d (p+20)| 4 bytes |


c) struct comp3 {
      char a[2];
      struct comp2 b;
      int c;
   };

Note: p indicates the first memory index
MEMORY LAYOUT: | a[0] (p+1)| a[1] (p+2)| *b (p+10)| c (p+14)| 